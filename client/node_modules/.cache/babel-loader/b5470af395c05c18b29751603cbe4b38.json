{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jau55\\\\git\\\\gita\\\\sp2020_csc190_team-7\\\\reactproject\\\\client\\\\src\\\\components\\\\utils\\\\FileUpload.js\";\nimport React, { useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { CloudUploadOutlined } from '@ant-design/icons';\nimport Axios from 'axios';\n\nfunction FileUpload(props) {\n  const [Images, setImages] = useState([]);\n\n  const onDelete = image => {\n    const currentIndex = Images.indexOf(image);\n    let newImages = [...Images];\n    newImages.splice(currentIndex, 1);\n    setImages(newImages);\n    props.refreshFunction(newImages);\n  };\n\n  const onDrop = files => {\n    let formData = new FormData();\n    const config = {\n      header: {\n        'content-type': 'multipart/form-data'\n      }\n    };\n    formData.append(\"file\", files[0]); // save file to server\n\n    Axios.post('/api/product/uploadImage', formData, config).then(response => {\n      if (response.data.success) {\n        setImages([...Images, response.data.image]);\n        props.refreshFunction([...Images, response.data.image]);\n      } else {\n        alert('Failed to save the Image in Server');\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: onDrop,\n    multiple: false,\n    maxSize: 100000000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n    style: {\n      width: '300px',\n      height: '240px',\n      border: 'lpx solid black',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    }\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(CloudUploadOutlined, {\n    style: {\n      fontSize: '3rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      width: '350px',\n      height: '240px',\n      overflowX: 'scroll'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, Images.map((image, index) => /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => onDelete(image),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      minWidth: '300px',\n      width: '300px',\n      height: '240px'\n    },\n    src: `http://localhost:5000/${image}`,\n    alt: `productImg-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 25\n    }\n  })))));\n}\n\nexport default FileUpload;","map":{"version":3,"sources":["C:/Users/jau55/git/gita/sp2020_csc190_team-7/reactproject/client/src/components/utils/FileUpload.js"],"names":["React","useState","Dropzone","CloudUploadOutlined","Axios","FileUpload","props","Images","setImages","onDelete","image","currentIndex","indexOf","newImages","splice","refreshFunction","onDrop","files","formData","FormData","config","header","append","post","then","response","data","success","alert","display","justifyContent","getRootProps","getInputProps","width","height","border","alignItems","fontSize","overflowX","map","index","minWidth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport {CloudUploadOutlined} from '@ant-design/icons';\r\nimport Axios from 'axios'\r\n\r\n\r\nfunction FileUpload(props) {\r\n\r\n    const [Images, setImages] = useState([])\r\n    const onDelete = (image) => {\r\n        const currentIndex = Images.indexOf(image);\r\n\r\n        let newImages = [...Images]\r\n        newImages.splice(currentIndex, 1)\r\n\r\n        setImages(newImages)\r\n        props.refreshFunction(newImages)\r\n    }\r\n    const onDrop = (files) => {\r\n        let formData = new FormData();\r\n        const config = {\r\n            header: { 'content-type': 'multipart/form-data' }\r\n        }\r\n        formData.append(\"file\", files[0])\r\n\r\n        // save file to server\r\n        Axios.post('/api/product/uploadImage', formData, config)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n\r\n                    setImages([...Images, response.data.image])\r\n                    props.refreshFunction([...Images, response.data.image])\r\n\r\n                } else {\r\n                    alert('Failed to save the Image in Server')\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Dropzone\r\n                onDrop={onDrop}\r\n                multiple={false}\r\n                maxSize={100000000}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div style={{\r\n                        width: '300px', height: '240px',\r\n                        border: 'lpx solid black', display: 'flex',\r\n                        alignItems: 'center', justifyContent: 'center'\r\n                    }}\r\n                        {...getRootProps()}\r\n                    >\r\n                        <input {...getInputProps()} />\r\n\r\n\r\n                        <CloudUploadOutlined style={{ fontSize: '3rem' }} />\r\n\r\n\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            <div style={{\r\n                display: 'flex', width: '350px',\r\n                height: '240px', overflowX: 'scroll'\r\n            }}>\r\n                {Images.map((image, index) => (\r\n                    <div onClick={() => onDelete(image)}>\r\n                        <img style={{ minWidth: '300px', width: '300px', height: '240px' }} src={`http://localhost:5000/${image}`} alt={`productImg-${index}`} />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileUpload"]},"metadata":{},"sourceType":"module"}