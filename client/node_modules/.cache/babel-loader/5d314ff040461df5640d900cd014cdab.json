{"ast":null,"code":"/*Creating a custom hook to keep all of our state in functions\nwithin the component of CreateAccount.js */\nimport { useState, useEffect } from 'react';\n\nconst useForm = (callback, validate) => {\n  const [values, setValues] = useState({\n    firstname: '',\n    lastname: '',\n    email: '',\n    password: '',\n    password2: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validate) {\n      setErrors(validate(values));\n    }\n\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      if (callback) {\n        callback();\n      }\n    }\n  }, [errors]);\n  {\n    /*(const handleSubmit = e => {\n       e.preventDefault();\n            setErrors(validate(values));\n       setIsSubmitting(true);\n     };\n          useEffect(\n       () => {\n         if (Object.keys(errors).length === 0 && isSubmitting) {\n           callback();\n         }\n       },\n       [errors]\n    );*/\n  }\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors\n  };\n};\n\nexport default useForm;","map":{"version":3,"sources":["C:/Users/jau55/git/sp2020_csc190_team-7/reactproject/client/src/useForm.js"],"names":["useState","useEffect","useForm","callback","validate","values","setValues","firstname","lastname","email","password","password2","errors","setErrors","isSubmitting","setIsSubmitting","handleChange","e","name","value","target","handleSubmit","preventDefault","Object","keys","length"],"mappings":"AAAA;AACA;AAEA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACjCO,IAAAA,SAAS,EAAE,EADsB;AAEjCC,IAAAA,QAAQ,EAAE,EAFuB;AAGjCC,IAAAA,KAAK,EAAE,EAH0B;AAIjCC,IAAAA,QAAQ,EAAE,EAJuB;AAKjCC,IAAAA,SAAS,EAAE;AALsB,GAAD,CAApC;AAQA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMgB,YAAY,GAAGC,CAAC,IAAI;AACtB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAxB;AACAd,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AAEN,OAACa,IAAD,GAAQC;AAFF,KAAD,CAAT;AAIH,GAND;;AAQA,QAAME,YAAY,GAAGJ,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACK,cAAF;;AAEA,QAAIlB,QAAJ,EAAc;AACVS,MAAAA,SAAS,CAACT,QAAQ,CAACC,MAAD,CAAT,CAAT;AACH;;AACDU,IAAAA,eAAe,CAAC,IAAD,CAAf;AACH,GAPD;;AASAd,EAAAA,SAAS,CACL,MAAM;AACN,QAAIsB,MAAM,CAACC,IAAP,CAAYZ,MAAZ,EAAoBa,MAApB,KAA+B,CAA/B,IAAoCX,YAAxC,EAAsD;AAClD,UAAIX,QAAJ,EAAc;AACVA,QAAAA,QAAQ;AACX;AACJ;AACJ,GAPQ,EAON,CAACS,MAAD,CAPM,CAAT;AAWA;AAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAES;AAGL,SAAO;AAACI,IAAAA,YAAD;AAAeK,IAAAA,YAAf;AAA6BhB,IAAAA,MAA7B;AAAqCO,IAAAA;AAArC,GAAP;AACH,CA1DD;;AA4DA,eAAeV,OAAf","sourcesContent":["/*Creating a custom hook to keep all of our state in functions\nwithin the component of CreateAccount.js */\n\nimport {useState, useEffect} from 'react';\n\nconst useForm = (callback, validate) => {\n    const [values, setValues] = useState({\n        firstname: '',\n        lastname: '',\n        email: '',\n        password: '',\n        password2: ''\n    });\n\n    const [errors, setErrors] = useState({});\n    const [isSubmitting, setIsSubmitting] = useState(false);\n\n    const handleChange = e => {\n        const {name, value} = e.target;\n        setValues({\n            ...values,\n            [name]: value\n        });\n    };\n \n    const handleSubmit = e => {\n        e.preventDefault();\n\n        if (validate) {\n            setErrors(validate(values));\n        }\n        setIsSubmitting(true);\n    };\n\n    useEffect(\n        () => {\n        if (Object.keys(errors).length === 0 && isSubmitting) {\n            if (callback) {\n                callback()\n            }\n        }\n    }, [errors]\n);\n\n    \n    {/*(const handleSubmit = e => {\n        e.preventDefault();\n    \n        setErrors(validate(values));\n        setIsSubmitting(true);\n      };\n    \n      useEffect(\n        () => {\n          if (Object.keys(errors).length === 0 && isSubmitting) {\n            callback();\n          }\n        },\n        [errors]\n    );*/}\n    \n\n    return {handleChange, handleSubmit, values, errors};\n};\n\nexport default useForm;"]},"metadata":{},"sourceType":"module"}