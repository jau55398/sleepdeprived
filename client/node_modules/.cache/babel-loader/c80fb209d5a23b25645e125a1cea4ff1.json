{"ast":null,"code":"import './TestCreateAccount';\n/* This contains the logic to validate customer's info when signing up\n    Confirms if\n        - Name is valid or filled\n        - Email is valid or filled\n        - Passwords match or filled*/\n\nexport default function validateAccountInfo(values) {\n  let errors = {}; //User's FIRST NAME\n\n  if (!values.firstname.trim()) {\n    errors.firstname = \"First Name required\";\n  } //User's LAST NAME\n\n\n  if (!values.lastname.trim()) {\n    errors.lastname = \"Last Name required\";\n  } //EMAIL\n  //if no value/empty showcase \"Email Required\"\n\n\n  if (!values.email) {\n    errors.email = \"Email required\";\n  } //if there is input, without proper @ or .com showcase \"Email address is invalid\"\n  else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n      errors.email = \"Email address is invalid\";\n    } //PASSWORD\n\n\n  if (!values.password) {\n    errors.password = \"Password required\";\n  } else if (values.password.length < 6) {\n    errors.password = \"Password needs to be 6 characters or more\";\n  } //CONFIRM PASSWORD\n  //User must confirm their password\n\n\n  if (!values.password2) {\n    errors.password2 = \"You must confirm your password\";\n  } //Checks if user's passwords match\n  else if (values.password2 !== values.password) {\n      errors.password2 = \"Passwords do not match\";\n    }\n\n  return errors;\n}","map":{"version":3,"sources":["C:/Users/jau55/git/sp2020_csc190_team-7/reactproject/client/src/ValidateAccountInfo.js"],"names":["validateAccountInfo","values","errors","firstname","trim","lastname","email","test","password","length","password2"],"mappings":"AAAA,OAAO,qBAAP;AAEA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASA,mBAAT,CAA6BC,MAA7B,EAAqC;AAChD,MAAIC,MAAM,GAAG,EAAb,CADgD,CAGhD;;AACA,MAAG,CAACD,MAAM,CAACE,SAAP,CAAiBC,IAAjB,EAAJ,EAA6B;AACzBF,IAAAA,MAAM,CAACC,SAAP,GAAmB,qBAAnB;AACH,GAN+C,CAQhD;;;AACA,MAAG,CAACF,MAAM,CAACI,QAAP,CAAgBD,IAAhB,EAAJ,EAA4B;AACxBF,IAAAA,MAAM,CAACG,QAAP,GAAkB,oBAAlB;AACH,GAX+C,CAahD;AACI;;;AACJ,MAAG,CAACJ,MAAM,CAACK,KAAX,EAAkB;AACdJ,IAAAA,MAAM,CAACI,KAAP,GAAe,gBAAf;AACH,GAFD,CAGI;AAHJ,OAIK,IAAG,CAAC,2CAA2CC,IAA3C,CAAgDN,MAAM,CAACK,KAAvD,CAAJ,EAAmE;AACpEJ,MAAAA,MAAM,CAACI,KAAP,GAAe,0BAAf;AACH,KArB+C,CAuBhD;;;AACA,MAAG,CAACL,MAAM,CAACO,QAAX,EAAqB;AACjBN,IAAAA,MAAM,CAACM,QAAP,GAAkB,mBAAlB;AACH,GAFD,MAGK,IAAGP,MAAM,CAACO,QAAP,CAAgBC,MAAhB,GAAyB,CAA5B,EAA+B;AAChCP,IAAAA,MAAM,CAACM,QAAP,GAAkB,2CAAlB;AACH,GA7B+C,CA+BhD;AACI;;;AACJ,MAAG,CAACP,MAAM,CAACS,SAAX,EAAsB;AAClBR,IAAAA,MAAM,CAACQ,SAAP,GAAmB,gCAAnB;AACH,GAFD,CAGI;AAHJ,OAIK,IAAIT,MAAM,CAACS,SAAP,KAAqBT,MAAM,CAACO,QAAhC,EAA0C;AAC3CN,MAAAA,MAAM,CAACQ,SAAP,GAAmB,wBAAnB;AACH;;AAED,SAAOR,MAAP;AACH","sourcesContent":["import './TestCreateAccount';\n\n/* This contains the logic to validate customer's info when signing up\n    Confirms if\n        - Name is valid or filled\n        - Email is valid or filled\n        - Passwords match or filled*/\n\nexport default function validateAccountInfo(values) {\n    let errors = {}\n\n    //User's FIRST NAME\n    if(!values.firstname.trim()) {\n        errors.firstname = \"First Name required\"\n    }\n\n    //User's LAST NAME\n    if(!values.lastname.trim()) {\n        errors.lastname = \"Last Name required\"\n    }\n\n    //EMAIL\n        //if no value/empty showcase \"Email Required\"\n    if(!values.email) {\n        errors.email = \"Email required\"\n    }\n        //if there is input, without proper @ or .com showcase \"Email address is invalid\"\n    else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n        errors.email = \"Email address is invalid\"\n    }\n\n    //PASSWORD\n    if(!values.password) {\n        errors.password = \"Password required\"\n    }\n    else if(values.password.length < 6) {\n        errors.password = \"Password needs to be 6 characters or more\"\n    }\n\n    //CONFIRM PASSWORD\n        //User must confirm their password\n    if(!values.password2) {\n        errors.password2 = \"You must confirm your password\"\n    }\n        //Checks if user's passwords match\n    else if (values.password2 !== values.password) {\n        errors.password2 = \"Passwords do not match\"\n    }\n\n    return errors;\n}"]},"metadata":{},"sourceType":"module"}